{"version":3,"sources":["api.js","App.js","serviceWorker.js","index.js"],"names":["getAttendeePhotoAlbum","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","eventId","userId","url","response","wrap","_context","prev","next","concat","fetch","sent","abrupt","json","stop","this","_x","_x2","apply","arguments","Sound","require","default","sounds","getSound","n","Math","random","App","state","soundStatus","status","STOPPED","selectedSound","showDudu","playSound","_this","setState","PLAYING","setTimeout","URL","window","location","href","searchParams","get","images","attendeePhotos","eventName","event","name","attendeeName","attendee","firstName","lastName","profileImageSrc","thumbnailUrl","_this2","_this$state","_this$state$attendeeN","_this$state$profileIm","_this$state$eventName","_this$state$images","react_default","createElement","className","src","alt","map","image","i","onClick","key","playStatus","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f73bfb3.chunk.js","sourcesContent":["\n\nexport const getAttendeePhotoAlbum = async (eventId, userId) => {\n    const url = `https://8ehxwo1lmi.execute-api.us-east-1.amazonaws.com/alpha/events/${eventId}/attendees/${userId}`;\n    const response = await fetch(url);\n    return response.json();\n};","import React, { Component } from 'react';\nimport './App.css';\nimport { getAttendeePhotoAlbum } from \"./api\";\nconst Sound = require('react-sound').default;\n\n\nconst sounds = ['https://s3.amazonaws.com/bizzathon-2018-audio/1.mp3', 'https://s3.amazonaws.com/bizzathon-2018-audio/2.mp3', 'https://s3.amazonaws.com/bizzathon-2018-audio/3.mp3', 'https://s3.amazonaws.com/bizzathon-2018-audio/4.mp3'];\nconst getSound = () => {\n  const n = Math.random();\n  if (n < 0.25) return sounds[0];\n  if (n < 0.5) return sounds[1];\n  if (n < 0.75) return sounds[2];\n  return sounds[3];\n};\n\nclass App extends Component {\n\n    state = {\n        soundStatus: Sound.status.STOPPED,\n        selectedSound: getSound(),\n        showDudu: false\n    };\n\n    async componentDidMount() {\n        const eventId = new URL(window.location.href).searchParams.get('event');\n        const userId = new URL(window.location.href).searchParams.get('user');\n        const response = await getAttendeePhotoAlbum(eventId, userId);\n        this.setState({\n            images: response.attendeePhotos,\n            eventName: response.event.name,\n            attendeeName: `${response.attendee.firstName} ${response.attendee.lastName}`,\n            profileImageSrc: response.attendee.thumbnailUrl\n        });\n    }\n\n    playSound = () => {\n        this.setState({\n            soundStatus: Sound.status.PLAYING,\n            selectedSound: getSound()\n        });\n    };\n\n    showDudu = () => {\n        this.setState({showDudu: true});\n        setTimeout(() => {\n                this.setState({showDudu: false});\n        }, 200);\n    };\n\n    render() {\n        const { attendeeName='YOU',\n                profileImageSrc=\"https://images.vexels.com/media/users/3/145908/preview2/52eabf633ca6414e60a7677b0b917d92-male-avatar-maker.jpg\",\n                eventName='the thing',\n                images=[]\n        } = this.state;\n        return (\n          <div className=\"App\">\n            <header>\n                <img src={profileImageSrc} alt=\"Barak Mazal Tov!\" />\n                <h1>\n                    HI {attendeeName},\n                </h1>\n                <h3>\n                    It was great seeing you at {eventName}\n                </h3>\n            </header>\n            <section className=\"gallery\">\n                <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"><img src=\"http://alawteam.com/fb.png\" alt=\"share\" className=\"share-button\" /></a>\n                <h2>YOU LOOK AMAZING!</h2>\n                {images && images.map((image, i) => <img onClick={this.playSound} className=\"attendee-image\" src={image} key={i} alt=\"Your Photos\" /> )}\n            </section>\n\n            <section className=\"sponsors\">\n                <h2>THANKS TO OUR SPONSORS</h2>\n                <div className=\"sponsors-container\">\n                    <div className=\"sponsors-row\">\n                        <img className=\"sponsor-image\" src=\"https://welcome.bizzabo.com/hs-fs/hub/318095/file-2435692466-png/images/bizzabo-logo.png?t=1537307148049&width=325&name=bizzabo-logo.png\" alt=\"Bizzabo\" />\n                        <img className=\"sponsor-image\" src=\"http://pngimg.com/uploads/google/google_PNG19644.png\" alt=\"Google\" />\n                    </div>\n                    <div className=\"sponsors-row\">\n                        <img className=\"sponsor-image\" src=\"https://images.g2crowd.com/uploads/product/image/social_landscape/social_landscape_1525720131/hubspot.png\" alt=\"Hubspot\" />\n                        <img className=\"sponsor-image\" src=\"https://sfi.mechatronics.no/wp-content/uploads/2017/05/github.png\" alt=\"Github\" />\n                    </div>\n                </div>\n            </section>\n\n            <section className=\"next-event\">\n                <h2>USE PHOTOVENT FREE FOR YOUR NEXT EVENT</h2>\n                <button onClick={this.showDudu}>TRY NOW</button>\n            </section>\n            <Sound url={this.state.selectedSound} playStatus={this.state.soundStatus} />\n              {this.state.showDudu && <div className=\"dudu\"></div>}\n          </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}