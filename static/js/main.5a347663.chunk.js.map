{"version":3,"sources":["api.js","App.js","serviceWorker.js","index.js"],"names":["getAttendeePhotoAlbum","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","eventId","userId","url","response","wrap","_context","prev","next","concat","fetch","sent","abrupt","json","stop","this","_x","_x2","apply","arguments","App","state","URL","window","location","href","searchParams","get","body","setState","images","attendeePhotos","eventName","event","name","attendeeName","attendee","firstName","lastName","profileImageSrc","thumbnailUrl","console","log","_this$state","react_default","createElement","className","src","alt","map","image","i","externalImageId","key","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAEaA,SAAqB,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,EAASC,GAAhB,IAAAC,EAAAC,EAAA,OAAAP,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAC3BL,EAD2B,uEAAAM,OACkDR,EADlD,eAAAQ,OACuEP,GADvEI,EAAAE,KAAA,EAEVE,MAAMP,GAFI,cAE3BC,EAF2BE,EAAAK,KAAAL,EAAAM,OAAA,SAG1BR,EAASS,QAHiB,wBAAAP,EAAAQ,SAAAd,EAAAe,SAAH,gBAAAC,EAAAC,GAAA,OAAAvB,EAAAwB,MAAAH,KAAAI,YAAA,IC0FnBC,6MAtFXC,MAAQ,iNA+BEpB,EAAU,IAAIqB,IAAIC,OAAOC,SAASC,MAAMC,aAAaC,IAAI,SACzDzB,EAAS,IAAIoB,IAAIC,OAAOC,SAASC,MAAMC,aAAaC,IAAI,iBACvClC,EAAsBQ,EAASC,UAAhDE,SACAwB,EAAOxB,EAASwB,KACtBb,KAAKc,SAAS,CACVC,OAAQF,EAAKG,eACbC,UAAWJ,EAAKK,MAAMC,KACtBC,aAAY,GAAA1B,OAAKmB,EAAKQ,SAASC,UAAnB,KAAA5B,OAAgCmB,EAAKQ,SAASE,UAC1DC,gBAAiBX,EAAKQ,SAASI,eAEnCC,QAAQC,IAAI,WAAYtC,EAASwB,yIAG5B,IAAAe,EACwD5B,KAAKM,MAA1Dc,EADHQ,EACGR,aAAcI,EADjBI,EACiBJ,gBAAiBP,EADlCW,EACkCX,UAAWF,EAD7Ca,EAC6Cb,OAClD,OACEc,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,OACbF,EAAA9C,EAAA+C,cAAA,UAAQC,UAAU,kBACdF,EAAA9C,EAAA+C,cAAA,OAAKE,IAAKR,GAAmB,gGAAiGS,IAAI,qBAClIJ,EAAA9C,EAAA+C,cAAA,gBACQV,GAAgB,MADxB,KAGAS,EAAA9C,EAAA+C,cAAA,wCACgCb,GAAa,cAGjDY,EAAA9C,EAAA+C,cAAA,WAASC,UAAU,WACfF,EAAA9C,EAAA+C,cAAA,+BACCf,GAAUA,EAAOmB,IAAI,SAACC,EAAOC,GAAR,OAAcP,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,iBAAiBC,IAAKG,EAAME,gBAAiBC,IAAKF,OAGzGP,EAAA9C,EAAA+C,cAAA,WAASC,UAAU,YACfF,EAAA9C,EAAA+C,cAAA,oCACAD,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,sBACXF,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,gBACXF,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,gBAAgBC,IAAI,6IACnCH,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,gBAAgBC,IAAI,0DAEvCH,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,gBACXF,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,gBAAgBC,IAAI,8GACnCH,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,gBAAgBC,IAAI,yEAK/CH,EAAA9C,EAAA+C,cAAA,WAASC,UAAU,cACfF,EAAA9C,EAAA+C,cAAA,qDACAD,EAAA9C,EAAA+C,cAAA,kCAhFES,aCQEC,QACW,cAA7BhC,OAAOC,SAASgC,UAEe,UAA7BjC,OAAOC,SAASgC,UAEhBjC,OAAOC,SAASgC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAA9C,EAAA+C,cAACe,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5a347663.chunk.js","sourcesContent":["\n\nexport const getAttendeePhotoAlbum = async (eventId, userId) => {\n    const url = `https://8ehxwo1lmi.execute-api.us-east-1.amazonaws.com/alpha/events/${eventId}/attendees/${userId}`;\n    const response = await fetch(url);\n    return response.json();\n};","import React, { Component } from 'react';\nimport './App.css';\nimport { getAttendeePhotoAlbum } from \"./api\";\n\nclass App extends Component {\n\n    state = {\n        // response: 'start',\n        // images: [\n        //     {\n        //         src: 'https://peopledotcom.files.wordpress.com/2017/11/harry-meghan-15.jpg',\n        //     },\n        //     {\n        //         src: 'https://imagesvc.timeincapp.com/v3/mm/image?url=https%3A%2F%2Fpeopledotcom.files.wordpress.com%2F2018%2F07%2Fthomas-rhett1.jpg',\n        //     },\n        //     {\n        //         src: 'https://as.ftcdn.net/r/v1/pics/ea2e0032c156b2d3b52fa9a05fe30dedcb0c47e3/landing/images_photos.jpg',\n        //     },\n        //     {\n        //         src: 'https://pixel.nymag.com/imgs/fashion/daily/2018/08/17/magazine/tessa-thompson-1.w570.h712.jpg',\n        //     },\n        //     {\n        //         src: 'http://images.panda.org/assets/images/pages/welcome/orangutan_1600x1000_279157.jpg',\n        //     },\n        //     {\n        //         src: 'https://www.cdc.gov/stroke/images/family_history.jpg',\n        //     },\n        //     {\n        //         src: 'https://i1.wp.com/thefreshimages.com/wp-content/uploads/2017/08/krishna-images-10.jpg?ssl=1',\n        //     },\n        //     {\n        //         src: 'https://thenypost.files.wordpress.com/2018/06/180608-donald-trump.jpg',\n        //     }\n        // ]\n    };\n\n    async componentDidMount() {\n        const eventId = new URL(window.location.href).searchParams.get('event');\n        const userId = new URL(window.location.href).searchParams.get('user');\n        const response = await getAttendeePhotoAlbum(eventId, userId);\n        const body = response.body;\n        this.setState({\n            images: body.attendeePhotos,\n            eventName: body.event.name,\n            attendeeName: `${body.attendee.firstName} ${body.attendee.lastName}`,\n            profileImageSrc: body.attendee.thumbnailUrl\n        });\n        console.log('@@@ this', response.body);\n    }\n\n    render() {\n        const { attendeeName, profileImageSrc, eventName, images } = this.state;\n        return (\n          <div className=\"App\">\n            <header className=\"purple-section\">\n                <img src={profileImageSrc || \"https://www.rd.com/wp-content/uploads/2017/09/01-shutterstock_476340928-Irina-Bg-1024x683.jpg\"} alt=\"Barak Mazal Tov!\" />\n                <h1>\n                    HI {attendeeName || 'YOU'},\n                </h1>\n                <h3>\n                    It was great seeing you at {eventName || 'the thing'}\n                </h3>\n            </header>\n            <section className=\"gallery\">\n                <h2>YOU LOOK AMAZING!</h2>\n                {images && images.map((image, i) => <img className=\"attendee-image\" src={image.externalImageId} key={i} /> )}\n            </section>\n\n            <section className=\"sponsors\">\n                <h2>THANKS TO OUR SPONSORS</h2>\n                <div className=\"sponsors-container\">\n                    <div className=\"sponsors-row\">\n                        <img className=\"sponsor-image\" src=\"https://welcome.bizzabo.com/hs-fs/hub/318095/file-2435692466-png/images/bizzabo-logo.png?t=1537307148049&width=325&name=bizzabo-logo.png\" />\n                        <img className=\"sponsor-image\" src=\"http://pngimg.com/uploads/google/google_PNG19644.png\" />\n                    </div>\n                    <div className=\"sponsors-row\">\n                        <img className=\"sponsor-image\" src=\"https://images.g2crowd.com/uploads/product/image/social_landscape/social_landscape_1525720131/hubspot.png\" />\n                        <img className=\"sponsor-image\" src=\"https://sfi.mechatronics.no/wp-content/uploads/2017/05/github.png\" />\n                    </div>\n                </div>\n            </section>\n\n            <section className=\"next-event\">\n                <h2>USE PHOTOEVENT FREE FOR YOUR NEXT EVENT</h2>\n                <button>TRY NOW</button>\n            </section>\n\n          </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}